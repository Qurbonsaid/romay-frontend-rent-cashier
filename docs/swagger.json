{
  "swaggerDoc": {
    "openapi": "3.0.3",
    "info": {
      "title": "Romay API",
      "version": "1.0.0",
      "description": "API for CEO sign-up, login, profile management and token handling."
    },
    "servers": [
      {
        "url": "http://localhost:8787"
      },
      {
        "url": "https://romay.edumansim.uz"
      }
    ],
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "paths": {
      "/upload/file": {
        "post": {
          "consumes": ["multipart/form-data"],
          "tags": ["Upload"],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/upload/files": {
        "post": {
          "tags": ["Upload"],
          "summary": "Upload Files",
          "description": "Uploads images (converted to webp) and PDFs (compressed) and returns file paths. Requires authentication.",
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      },
                      "description": "Array of files to upload (images or PDFs)"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Files uploaded successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "file_paths": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "https://example.com/uploads/image/abcd1234.webp"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Files not uploaded or invalid request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "integer",
                        "example": 400
                      },
                      "message": {
                        "type": "string",
                        "example": "Files not uploaded"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "integer",
                        "example": 401
                      },
                      "message": {
                        "type": "string",
                        "example": "Unauthorized"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Files not provided",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "integer",
                        "example": 404
                      },
                      "message": {
                        "type": "string",
                        "example": "Files not provided"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error while processing files",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "integer",
                        "example": 500
                      },
                      "message": {
                        "type": "string",
                        "example": "Error compressing PDF"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/dashboard/stats": {
        "get": {
          "summary": "Get dashboard statistics",
          "description": "Returns statistics based on the authenticated user's role (CEO, Manager, Employee, etc.)",
          "tags": ["Dashboard"],
          "responses": {}
        }
      },
      "/sales/add": {
        "post": {
          "summary": "Create a new sale for [sale_cashier]",
          "tags": ["Sales"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch_id": {
                      "type": "string"
                    },
                    "cashier_id": {
                      "type": "string"
                    },
                    "client_id": {
                      "type": "string"
                    }
                  },
                  "required": ["branch_id", "cashier_id"]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Sale created successfully"
            },
            "404": {
              "description": "Branch, cashier or client not found"
            }
          }
        }
      },
      "/sales/update-client/{id}": {
        "patch": {
          "summary": "Update client for a sale for [sale_cashier]",
          "tags": ["Sales"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client updated in sale successfully"
            },
            "400": {
              "description": "Sale already paid or canceled"
            },
            "404": {
              "description": "Sale or client not found"
            }
          }
        }
      },
      "/sales/cancel-status/{id}": {
        "patch": {
          "summary": "Cancel a sale for [sale_cashier]",
          "tags": ["Sales"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Sale canceled successfully"
            },
            "400": {
              "description": "Sale already canceled or paid"
            },
            "404": {
              "description": "Sale not found"
            }
          }
        }
      },
      "/sales/add-payment/{id}": {
        "patch": {
          "summary": "Add payment to a sale for [sale_cashier]",
          "tags": ["Payments"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number"
                    }
                  },
                  "required": ["amount"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment added successfully"
            },
            "400": {
              "description": "Payment exceeds total or sale not payable"
            },
            "404": {
              "description": "Sale not found"
            }
          }
        }
      },
      "/sales/get-all": {
        "get": {
          "summary": "Get all sales with filters for [ceo,manager,sale_cashier]",
          "tags": ["Sales"],
          "parameters": [
            {
              "name": "cashier_id",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "client_id",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "branch_id",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_from",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "date"
              }
            },
            {
              "name": "date_to",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "date"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of sales with pagination"
            }
          }
        }
      },
      "/sales/get-one/{id}": {
        "get": {
          "summary": "Get a sale by ID for [ceo,manager,sale_cashier]",
          "tags": ["Sales"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Sale found"
            },
            "404": {
              "description": "Sale not found"
            }
          }
        }
      },
      "/sales/delete/{id}": {
        "delete": {
          "summary": "Delete a sale for [sale_cashier]",
          "tags": ["Sales"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Sale deleted successfully"
            },
            "404": {
              "description": "Sale not found"
            }
          }
        }
      },
      "/sales/add-item/{id}": {
        "post": {
          "summary": "Add item to a sale for [sale_cashier]",
          "tags": ["Items"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product_id": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "integer"
                    }
                  },
                  "required": ["product_id", "quantity"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Item added successfully"
            },
            "400": {
              "description": "Invalid stock or item already exists"
            },
            "404": {
              "description": "Sale or product not found"
            }
          }
        }
      },
      "/sales/update-item/{id}": {
        "put": {
          "summary": "Update item in a sale for [sale_cashier]",
          "tags": ["Items"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product_id": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "integer"
                    }
                  },
                  "required": ["product_id", "quantity"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Item updated successfully"
            },
            "400": {
              "description": "Invalid stock or sale status not pending"
            },
            "404": {
              "description": "Sale or product not found"
            }
          }
        }
      },
      "/sales/delete-item/{id}": {
        "delete": {
          "summary": "Delete item from a sale for [sale_cashier]",
          "tags": ["Items"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product_id": {
                      "type": "string"
                    }
                  },
                  "required": ["product_id"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Item deleted successfully"
            },
            "400": {
              "description": "Sale status not pending"
            },
            "404": {
              "description": "Sale or product not found"
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "tags": ["Auth"],
          "summary": "Login with phone and password",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phone": {
                      "type": "string",
                      "example": "+998901234567",
                      "description": "User phone number"
                    },
                    "password": {
                      "type": "string",
                      "example": "Password123!",
                      "description": "User password"
                    }
                  },
                  "required": ["phone", "password"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "access_token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      },
                      "refresh_token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid phone or password",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 400
                      },
                      "error": {
                        "type": "string",
                        "example": "Bad Request"
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid phone or password!"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/me": {
        "get": {
          "tags": ["Auth"],
          "summary": "Get currently logged-in user profile",
          "responses": {
            "200": {
              "description": "User profile retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "64f5c3e2f1b2a3d4e5f6g7h8"
                          },
                          "username": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "phone": {
                            "type": "string",
                            "example": "+998901234567"
                          },
                          "role": {
                            "type": "string",
                            "example": "MANAGER"
                          },
                          "branch_id": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "64f5c3e2f1b2a3d4e5f6g7h9"
                              },
                              "name": {
                                "type": "string",
                                "example": "Main Branch"
                              },
                              "address": {
                                "type": "string",
                                "example": "Tashkent, Uzbekistan"
                              }
                            },
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Access denied",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 403
                      },
                      "error": {
                        "type": "string",
                        "example": "Forbidden"
                      },
                      "message": {
                        "type": "string",
                        "example": "Access denied!"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/update-phone": {
        "patch": {
          "tags": ["Auth"],
          "summary": "Update the phone number of the logged-in user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phone": {
                      "type": "string",
                      "example": "+998901234567",
                      "description": "New phone number"
                    }
                  },
                  "required": ["phone"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Phone number updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Phone number already in use",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 400
                      },
                      "error": {
                        "type": "string",
                        "example": "Bad Request"
                      },
                      "message": {
                        "type": "string",
                        "example": "Phone number already in use!"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 404
                      },
                      "error": {
                        "type": "string",
                        "example": "Not Found"
                      },
                      "message": {
                        "type": "string",
                        "example": "User not found!"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/update-password": {
        "patch": {
          "tags": ["Auth"],
          "summary": "Update the password of the logged-in user",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_password": {
                      "type": "string",
                      "example": "OldPassword123!",
                      "description": "Current password of the user"
                    },
                    "new_password": {
                      "type": "string",
                      "example": "NewPassword123!",
                      "description": "New password for the user"
                    }
                  },
                  "required": ["current_password", "new_password"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "New password same as current password",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 400
                      },
                      "error": {
                        "type": "string",
                        "example": "Bad Request"
                      },
                      "message": {
                        "type": "string",
                        "example": "New password must be different from current password!"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Current password incorrect or access denied",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 403
                      },
                      "error": {
                        "type": "string",
                        "example": "Forbidden"
                      },
                      "message": {
                        "type": "string",
                        "example": "Current password incorrect!"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 404
                      },
                      "error": {
                        "type": "string",
                        "example": "Not Found"
                      },
                      "message": {
                        "type": "string",
                        "example": "User not found!"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/refresh/{token}": {
        "post": {
          "tags": ["Auth"],
          "summary": "Refresh access and refresh tokens using a valid refresh token",
          "parameters": [
            {
              "name": "token",
              "in": "path",
              "required": true,
              "description": "Refresh token",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              }
            }
          ],
          "requestBody": {
            "description": "No body required",
            "required": false
          },
          "responses": {
            "200": {
              "description": "Tokens refreshed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "new_access_token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      },
                      "new_refresh_token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Refresh token missing or invalid",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 403
                      },
                      "error": {
                        "type": "string",
                        "example": "Forbidden"
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid refresh token"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/history/get-all": {
        "get": {
          "tags": ["History"],
          "summary": "Get all histories for [ceo]",
          "description": "Retrieve a paginated list of history logs with optional filters (action, model, user_id, date range).",
          "parameters": [
            {
              "name": "action",
              "in": "query",
              "description": "Filter by action type (CREATE, UPDATE, DELETE, etc.)",
              "required": false,
              "schema": {
                "type": "string",
                "example": "DELETE"
              }
            },
            {
              "name": "model",
              "in": "query",
              "description": "Filter by model name (Client, Branch, Employee, etc.)",
              "required": false,
              "schema": {
                "type": "string",
                "example": "Client"
              }
            },
            {
              "name": "user_id",
              "in": "query",
              "description": "Filter by user ID who performed the action",
              "required": false,
              "schema": {
                "type": "string",
                "example": "64f2c41d8e1c2a3d4567b123"
              }
            },
            {
              "name": "fromDate",
              "in": "query",
              "description": "Filter histories created after this date (ISO format)",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date-time",
                "example": "2025-08-01T00:00:00Z"
              }
            },
            {
              "name": "toDate",
              "in": "query",
              "description": "Filter histories created before this date (ISO format)",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date-time",
                "example": "2025-08-31T23:59:59Z"
              }
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page number (for pagination)",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 1,
                "example": 2
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Number of items per page",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 10,
                "example": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of histories with pagination",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": [
                      {
                        "_id": "64f2c41d8e1c2a3d4567b123",
                        "user_id": {
                          "_id": "64f2c41d8e1c2a3d4567b999",
                          "username": "admin",
                          "phone": "+998901234567"
                        },
                        "action": "DELETE",
                        "model": "Client",
                        "document_id": "64f2c41d8e1c2a3d4567b456",
                        "oldData": {
                          "username": "John Doe",
                          "phone": "+998909999999"
                        },
                        "newData": null,
                        "description": "Client John Doe deleted",
                        "created_at": "2025-08-30T12:00:00Z"
                      }
                    ],
                    "pagination": {
                      "total": 42,
                      "total_pages": 5,
                      "page": 2,
                      "limit": 10,
                      "next_page": true,
                      "prev_page": true
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/history/get-one/{id}": {
        "get": {
          "tags": ["History"],
          "summary": "Get a single history by ID for [ceo]",
          "description": "Retrieve details of a specific history record by its unique ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the history record",
              "required": true,
              "schema": {
                "type": "string",
                "example": "64f2c41d8e1c2a3d4567b123"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "History found successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": {
                      "_id": "64f2c41d8e1c2a3d4567b123",
                      "user_id": {
                        "_id": "64f2c41d8e1c2a3d4567b999",
                        "username": "admin",
                        "phone": "+998901234567"
                      },
                      "action": "UPDATE",
                      "model": "Client",
                      "document_id": "64f2c41d8e1c2a3d4567b456",
                      "oldData": {
                        "username": "John Doe",
                        "phone": "+998909999999"
                      },
                      "newData": {
                        "username": "John Updated",
                        "phone": "+998908888888"
                      },
                      "description": "Client information updated",
                      "created_at": "2025-08-30T15:20:00Z"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "History not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "History not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/history/delete/{id}": {
        "delete": {
          "tags": ["History"],
          "summary": "Delete a history by ID for [ceo]",
          "description": "Delete a specific history record by its unique ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the history record",
              "required": true,
              "schema": {
                "type": "string",
                "example": "64f2c41d8e1c2a3d4567b123"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "History deleted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "message": "History deleted successfully"
                  }
                }
              }
            },
            "404": {
              "description": "History not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "History not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/client/add": {
        "post": {
          "summary": "Yangi client qo'shish for [rent_cashier,sale_cashier]",
          "tags": ["Clients"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username",
                    "phone",
                    "profession",
                    "birth_date",
                    "branch_id",
                    "address"
                  ],
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "Ali Valiyev"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "example": "Doimiy mijoz"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "profession": {
                      "type": "string",
                      "example": "Doctor"
                    },
                    "birth_date": {
                      "type": "string",
                      "format": "date",
                      "example": "1990-05-12"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "Branch ObjectId",
                      "example": "64f123abcde4567890fgh123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Yunusobod"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Client muvaffaqiyatli qo'shildi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Client created successfully"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Telefon raqami yoki branch xatolik",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Phone number already exists"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/client/update/{id}": {
        "put": {
          "summary": "Client ma'lumotlarini yangilash for [rent_cashier,sale_cashier]",
          "tags": ["Clients"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "Client ID",
                "example": "64f123abcde4567890fgh123"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "Ali Valiyev"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "example": "Doimiy mijoz"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "profession": {
                      "type": "string",
                      "example": "Doctor"
                    },
                    "birth_date": {
                      "type": "string",
                      "format": "date",
                      "example": "1990-05-12"
                    },
                    "branch_id": {
                      "type": "string",
                      "description": "Branch ObjectId",
                      "example": "64f123abcde4567890fgh123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Yunusobod"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Muvaffaqiyatli yangilandi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Client updated successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Client topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Client not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Phone number yoki branch xatolik",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Client phone number already exists"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/client/get-all": {
        "get": {
          "summary": "Clientlar ro'yxatini olish for [ceo,manager,rent_cashier,sale_cashier]",
          "tags": ["Clients"],
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "description": "Qidiruv (username, description, phone, profession, address bo'yicha)",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "branch_id",
              "in": "query",
              "description": "Branch ID bo'yicha filter",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "page",
              "in": "query",
              "description": "Sahifa raqami",
              "schema": {
                "type": "integer",
                "default": 1,
                "minimum": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Bir sahifadagi elementlar soni",
              "schema": {
                "type": "integer",
                "default": 10,
                "minimum": 1,
                "maximum": 100
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Muvaffaqiyatli",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "64f123abcde4567890fgh123"
                            },
                            "username": {
                              "type": "string",
                              "example": "Ali Valiyev"
                            },
                            "description": {
                              "type": "string",
                              "example": "Doimiy mijoz"
                            },
                            "phone": {
                              "type": "string",
                              "example": "+998901234567"
                            },
                            "profession": {
                              "type": "string",
                              "example": "Doctor"
                            },
                            "birth_date": {
                              "type": "string",
                              "format": "date",
                              "example": "1990-05-12"
                            },
                            "branch_id": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "64f123abcde4567890fgh123"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "Central Branch"
                                },
                                "address": {
                                  "type": "string",
                                  "example": "Tashkent, Yunusobod"
                                }
                              }
                            },
                            "address": {
                              "type": "string",
                              "example": "Tashkent, Yunusobod"
                            }
                          }
                        }
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "example": 120
                          },
                          "total_pages": {
                            "type": "integer",
                            "example": 12
                          },
                          "page": {
                            "type": "integer",
                            "example": 1
                          },
                          "limit": {
                            "type": "integer",
                            "example": 10
                          },
                          "next_page": {
                            "type": "boolean",
                            "example": true
                          },
                          "prev_page": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/client/get-one/{id}": {
        "get": {
          "summary": "ID bo'yicha clientni olish for [ceo,manager,rent_cashier,sale_cashier]",
          "tags": ["Clients"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Client ID",
              "schema": {
                "type": "string",
                "example": "64f123abcde4567890fgh123"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Muvaffaqiyatli",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "64f123abcde4567890fgh123"
                          },
                          "username": {
                            "type": "string",
                            "example": "Ali Valiyev"
                          },
                          "description": {
                            "type": "string",
                            "example": "Doimiy mijoz"
                          },
                          "phone": {
                            "type": "string",
                            "example": "+998901234567"
                          },
                          "profession": {
                            "type": "string",
                            "example": "Doctor"
                          },
                          "birth_date": {
                            "type": "string",
                            "format": "date",
                            "example": "1990-05-12"
                          },
                          "branch_id": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "64f123abcde4567890fgh123"
                              },
                              "name": {
                                "type": "string",
                                "example": "Central Branch"
                              },
                              "address": {
                                "type": "string",
                                "example": "Tashkent, Yunusobod"
                              }
                            }
                          },
                          "address": {
                            "type": "string",
                            "example": "Tashkent, Yunusobod"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Client topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Client not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/client/delete/{id}": {
        "delete": {
          "summary": "Clientni o'chirish for [ceo,rent_cashier,sale_cashier]",
          "tags": ["Clients"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Client ID",
              "schema": {
                "type": "string",
                "example": "64f123abcde4567890fgh123"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Client muvaffaqiyatli o'chirildi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Client deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Client topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Client not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/ceo/sign-up": {
        "post": {
          "tags": ["CEO"],
          "summary": "CEO Sign Up",
          "description": "Register the CEO of the system. Only one CEO and one Main Warehouse can exist in the system.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["phone", "password", "reg_key"],
                  "properties": {
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "password": {
                      "type": "string",
                      "example": "StrongPassword123!"
                    },
                    "reg_key": {
                      "type": "string",
                      "example": "SECRET_REG_KEY"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "CEO successfully registered and Main Warehouse created",
              "content": {
                "application/json": {
                  "example": {
                    "success": true
                  }
                }
              }
            },
            "403": {
              "description": "System already has a CEO or Main Warehouse",
              "content": {
                "application/json": {
                  "examples": {
                    "existingCEO": {
                      "summary": "CEO already exists",
                      "value": {
                        "success": false,
                        "message": "This system use one CEO!"
                      }
                    },
                    "existingWarehouse": {
                      "summary": "Main Warehouse already exists",
                      "value": {
                        "success": false,
                        "message": "This system use one Main warehouse!"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Invalid registration key",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Registration key incorrect!"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/ceo/main-warehouse": {
        "get": {
          "tags": ["CEO-Transactions"],
          "summary": "Get main warehouse info for [ceo,storekeeper]",
          "description": "Retrieve the balance and other information of the main warehouse.",
          "responses": {
            "200": {
              "description": "Main warehouse info retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "64f8b3a1c1234abcd5678901"
                          },
                          "main_warehouse_balance": {
                            "type": "number",
                            "example": 1500000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Main warehouse not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "msg": {
                        "type": "string",
                        "example": "Main warehouse not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/ceo/get-all/cashout": {
        "get": {
          "summary": "Get all cashout transactions for [ceo]",
          "tags": ["CEO-Transactions"],
          "parameters": [
            {
              "name": "branch_id",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Filial ID bo'yicha filtr"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              },
              "description": "Sahifa raqami"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              },
              "description": "Bir sahifadagi elementlar soni"
            }
          ],
          "responses": {}
        }
      },
      "/ceo/branch/cashout/single": {
        "post": {
          "tags": ["CEO-Transactions"],
          "summary": "Cash out from single cashbox for [ceo]",
          "description": "Withdraw money from either sales or service cashbox of a branch.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["branch_id", "amount", "cashbox_type"],
                  "properties": {
                    "branch_id": {
                      "type": "string",
                      "example": "64f8b3a1c1234abcd5678901"
                    },
                    "amount": {
                      "type": "number",
                      "example": 500000
                    },
                    "cashbox_type": {
                      "type": "string",
                      "enum": ["sales", "service"],
                      "example": "sales"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Cash out successful"
            },
            "400": {
              "description": "Not enough money in branch or cashbox"
            },
            "404": {
              "description": "Branch not found"
            }
          }
        }
      },
      "/ceo/branch/cashout/single/{transaction_id}": {
        "put": {
          "tags": ["CEO-Transactions"],
          "summary": "Edit single cashbox cashout transaction for [ceo]",
          "parameters": [
            {
              "name": "transaction_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["amount"],
                  "properties": {
                    "amount": {
                      "type": "number",
                      "example": 600000
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Cashout transaction updated"
            },
            "404": {
              "description": "Transaction not found"
            }
          }
        },
        "delete": {
          "tags": ["CEO-Transactions"],
          "summary": "Delete single cashbox cashout transaction",
          "parameters": [
            {
              "name": "transaction_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Cashout transaction deleted"
            },
            "404": {
              "description": "Transaction not found"
            }
          }
        }
      },
      "/ceo/branch/cashout/total": {
        "post": {
          "tags": ["CEO-Transactions"],
          "summary": "Cash out from all branch cashboxes for [ceo]",
          "description": "Withdraw all money from sales and service cashboxes of a branch.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["branch_id"],
                  "properties": {
                    "branch_id": {
                      "type": "string",
                      "example": "64f8b3a1c1234abcd5678901"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Total branch cashout successful"
            },
            "400": {
              "description": "Not enough money in branch"
            },
            "404": {
              "description": "Branch not found"
            }
          }
        }
      },
      "/ceo/branch/cashout/total/{transaction_id}": {
        "delete": {
          "tags": ["CEO-Transactions"],
          "summary": "Delete total cashout transaction for [ceo]",
          "parameters": [
            {
              "name": "transaction_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Total cashout transaction deleted"
            },
            "404": {
              "description": "Transaction not found"
            }
          }
        }
      },
      "/ceo/get-all/main-warehouse/give": {
        "get": {
          "summary": "Get all cashout transactions for [ceo]",
          "tags": ["CEO-Transactions"],
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              },
              "description": "Sahifa raqami"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              },
              "description": "Bir sahifadagi elementlar soni"
            }
          ],
          "responses": {}
        }
      },
      "/ceo/main-warehouse/give": {
        "post": {
          "tags": ["CEO-Transactions"],
          "summary": "Give money to main warehouse for [ceo]",
          "description": "Transfer money from CEO balance to main warehouse.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["amount"],
                  "properties": {
                    "amount": {
                      "type": "number",
                      "example": 700000
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Money given to main warehouse"
            },
            "400": {
              "description": "Not enough money in CEO balance"
            }
          }
        }
      },
      "/ceo/main-warehouse/give/{transaction_id}": {
        "put": {
          "tags": ["CEO-Transactions"],
          "summary": "Edit give money transaction for [ceo]",
          "parameters": [
            {
              "name": "transaction_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["amount"],
                  "properties": {
                    "amount": {
                      "type": "number",
                      "example": 800000
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Give money transaction updated"
            },
            "404": {
              "description": "Transaction not found"
            }
          }
        },
        "delete": {
          "tags": ["CEO-Transactions"],
          "summary": "Delete give money transaction",
          "parameters": [
            {
              "name": "transaction_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Give money transaction deleted"
            },
            "404": {
              "description": "Transaction not found"
            }
          }
        }
      },
      "/sales-assistant/add": {
        "post": {
          "summary": "Yangi Sales Assistant qo'shish for [manager]",
          "tags": ["Sales Assistants"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "description": {
                      "type": "string",
                      "example": "Experienced sales assistant"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64f123abcde4567890fgh123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Chilonzor"
                    }
                  },
                  "required": ["username", "phone", "branch_id", "address"]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Sales Assistant muvaffaqiyatli qo'shildi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Sales Assistant created successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Branch topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Branch not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Telefon raqam allaqachon mavjud",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Sales Assistant phone number already exists"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/sales-assistant/update/{id}": {
        "put": {
          "summary": "Sales Assistant ma'lumotlarini yangilash for [manager]",
          "tags": ["Sales Assistants"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Yangilanishi kerak bo'lgan Sales Assistant ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "Jane Doe"
                    },
                    "description": {
                      "type": "string",
                      "example": "Updated description"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998911112233"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64f123abcde4567890fgh123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Yunusobod"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Sales Assistant muvaffaqiyatli yangilandi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Sales Assistant updated successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Sales Assistant yoki Branch topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Sales Assistant not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Telefon raqam allaqachon mavjud",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Sales Assistant phone number already exists"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/sales-assistant/get-all": {
        "get": {
          "summary": "Sales Assistantlar ro'yxatini olish for [ceo,manager,sale_cashier]",
          "tags": ["Sales Assistants"],
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Qidiruv uchun kalit so'z (username, description, phone, address bo'yicha qidiradi)",
              "example": ""
            },
            {
              "name": "branch_id",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Filial ID bo'yicha filtr"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              },
              "description": "Sahifa raqami"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              },
              "description": "Bir sahifadagi elementlar soni"
            }
          ],
          "responses": {
            "200": {
              "description": "Sales Assistantlar muvaffaqiyatli qaytarildi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "64f123abcde4567890fgh123"
                            },
                            "username": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "description": {
                              "type": "string",
                              "example": "Senior Sales Assistant"
                            },
                            "phone": {
                              "type": "string",
                              "example": "+998911112233"
                            },
                            "branch_id": {
                              "type": "string",
                              "example": "64f123abcde4567890fgh456"
                            },
                            "address": {
                              "type": "string",
                              "example": "Tashkent, Yunusobod"
                            }
                          }
                        }
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "example": 50
                          },
                          "total_pages": {
                            "type": "integer",
                            "example": 5
                          },
                          "page": {
                            "type": "integer",
                            "example": 1
                          },
                          "limit": {
                            "type": "integer",
                            "example": 10
                          },
                          "next_page": {
                            "type": "boolean",
                            "example": true
                          },
                          "prev_page": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/sales-assistant/get-one/{id}": {
        "get": {
          "summary": "Sales Assistantni ID bo'yicha olish   for [ceo,manager,sale_cashier]",
          "tags": ["Sales Assistants"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Sales Assistant ID",
              "schema": {
                "type": "string",
                "example": "64f123abcde4567890fgh123"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Sales Assistant muvaffaqiyatli qaytarildi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "64f123abcde4567890fgh123"
                          },
                          "username": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "description": {
                            "type": "string",
                            "example": "Senior Sales Assistant"
                          },
                          "phone": {
                            "type": "string",
                            "example": "+998911112233"
                          },
                          "branch_id": {
                            "type": "string",
                            "example": "64f123abcde4567890fgh456"
                          },
                          "address": {
                            "type": "string",
                            "example": "Tashkent, Yunusobod"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Sales Assistant topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Sales Assistant not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/sales-assistant/delete/{id}": {
        "delete": {
          "summary": "Sales Assistantni o'chirish for [manager]",
          "tags": ["Sales Assistants"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Sales Assistant ID",
              "schema": {
                "type": "string",
                "example": "64f123abcde4567890fgh123"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Sales Assistant muvaffaqiyatli o'chirildi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Sales Assistant deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Sales Assistant topilmadi",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Sales Assistant not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/branch/add": {
        "post": {
          "tags": ["Branch"],
          "summary": "Create a new branch for [ceo]",
          "description": "Adds a new branch and optionally assigns managers to it",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["name", "address"],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Tashkent Central",
                      "description": "Branch name, must be unique"
                    },
                    "address": {
                      "type": "string",
                      "example": "123 Main Street, Tashkent",
                      "description": "Branch address"
                    },
                    "manager_ids": {
                      "type": "array",
                      "description": "Array of manager IDs to assign to the branch (optional)",
                      "items": {
                        "type": "string",
                        "example": "64f8a2e1b1234abcd5678901"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Branch created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Branch created successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request, manager(s) not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "msg": {
                        "type": "string",
                        "example": "Manager(s) not found: 64f8a2e1b1234abcd5678901"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict, branch already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "msg": {
                        "type": "string",
                        "example": "Branch already exists"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/branch/update/{id}": {
        "put": {
          "tags": ["Branch"],
          "summary": "Update an existing branch for [ceo]",
          "description": "Updates branch details including name, address, and assigned managers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the branch to update",
              "schema": {
                "type": "string",
                "example": "64f8b3a1c1234abcd5678901"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Tashkent Central Updated",
                      "description": "New branch name (optional)"
                    },
                    "address": {
                      "type": "string",
                      "example": "456 New Street, Tashkent",
                      "description": "New branch address (optional)"
                    },
                    "manager_ids": {
                      "type": "array",
                      "description": "Array of manager IDs to assign to the branch (optional)",
                      "items": {
                        "type": "string",
                        "example": "64f8a2e1b1234abcd5678901"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Branch updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Branch updated successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request, manager(s) not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "msg": {
                        "type": "string",
                        "example": "Manager(s) not found: 64f8a2e1b1234abcd5678901"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Branch not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "msg": {
                        "type": "string",
                        "example": "Branch not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict, branch name already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "msg": {
                        "type": "string",
                        "example": "Branch name already exists"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/branch/get-all": {
        "get": {
          "tags": ["Branch"],
          "summary": "Get all branches with pagination and search for [ceo]",
          "description": "Retrieves a paginated list of branches. Supports search by branch name or address.",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "example": ""
              },
              "description": "Search term to filter branches by name or address (optional)"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "example": 1
              },
              "description": "Page number for pagination (optional, default: 1)"
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "example": 10
              },
              "description": "Number of items per page for pagination (optional, default: 10)"
            }
          ],
          "responses": {
            "200": {
              "description": "List of branches with pagination",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "64f8b3a1c1234abcd5678901"
                            },
                            "name": {
                              "type": "string",
                              "example": "Tashkent Central"
                            },
                            "address": {
                              "type": "string",
                              "example": "123 Main Street, Tashkent"
                            },
                            "manager_ids": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string",
                                    "example": "64f8a2e1b1234abcd5678901"
                                  },
                                  "username": {
                                    "type": "string",
                                    "example": "manager1"
                                  },
                                  "phone": {
                                    "type": "string",
                                    "example": "+998901234567"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "example": 25
                          },
                          "total_pages": {
                            "type": "integer",
                            "example": 3
                          },
                          "page": {
                            "type": "integer",
                            "example": 1
                          },
                          "limit": {
                            "type": "integer",
                            "example": 10
                          },
                          "next_page": {
                            "type": "boolean",
                            "example": true
                          },
                          "prev_page": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/branch/get-one/{id}": {
        "get": {
          "tags": ["Branch"],
          "summary": "Get branch by ID for [ceo]",
          "description": "Retrieve a single branch by its ID. Includes populated manager details.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "example": "64f8b3a1c1234abcd5678901"
              },
              "description": "The ID of the branch to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Branch details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "64f8b3a1c1234abcd5678901"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tashkent Central"
                          },
                          "address": {
                            "type": "string",
                            "example": "123 Main Street, Tashkent"
                          },
                          "manager_ids": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "64f8a2e1b1234abcd5678901"
                                },
                                "username": {
                                  "type": "string",
                                  "example": "manager1"
                                },
                                "phone": {
                                  "type": "string",
                                  "example": "+998901234567"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Branch not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Branch not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/branch/delete/{id}": {
        "delete": {
          "tags": ["Branch"],
          "summary": "Delete branch by ID for [ceo]",
          "description": "Deletes an existing branch by its ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "example": "64f8b3a1c1234abcd5678901"
              },
              "description": "The ID of the branch to delete"
            }
          ],
          "responses": {
            "200": {
              "description": "Branch deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "msg": {
                        "type": "string",
                        "example": "Branch deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Branch not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "Branch not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/employee/add": {
        "post": {
          "tags": ["Employee"],
          "summary": "Add a new employee for [ceo]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "password": {
                      "type": "string",
                      "example": "securepassword123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Uzbekistan"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64f1a2b3c4d5e6f789012345"
                    },
                    "role": {
                      "type": "string",
                      "example": "manager"
                    }
                  },
                  "required": [
                    "username",
                    "phone",
                    "password",
                    "address",
                    "branch_id",
                    "role"
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Employee created successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Employee created successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Branch not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Branch not found"
                  }
                }
              }
            },
            "409": {
              "description": "Phone number already exists",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Phone number already exists"
                  }
                }
              }
            }
          }
        }
      },
      "/employee/update/{id}": {
        "put": {
          "tags": ["Employee"],
          "summary": "Update an existing employee for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the employee to update",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "password": {
                      "type": "string",
                      "example": "newpassword123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Uzbekistan"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64f1a2b3c4d5e6f789012346"
                    },
                    "role": {
                      "type": "string",
                      "example": "manager"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Employee updated successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Employee updated successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Employee or branch not found",
              "content": {
                "application/json": {
                  "examples": {
                    "employeeNotFound": {
                      "summary": "Employee not found",
                      "value": {
                        "success": false,
                        "msg": "Employee not found"
                      }
                    },
                    "branchNotFound": {
                      "summary": "Branch not found",
                      "value": {
                        "success": false,
                        "msg": "Branch not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Phone number already exists",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Phone number already exists"
                  }
                }
              }
            }
          }
        }
      },
      "/employee/get-all": {
        "get": {
          "tags": ["Employee"],
          "summary": "Get all employees with optional search, branch filter, and pagination for [ceo]",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "required": false,
              "description": "Search term for username, address, or phone",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "description": "Filter by branch ID",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "description": "Page number for pagination",
              "schema": {
                "type": "integer",
                "example": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "description": "Number of employees per page",
              "schema": {
                "type": "integer",
                "example": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of employees",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": [
                      {
                        "_id": "64f1a2b3c4d5e6f789012345",
                        "username": "John Doe",
                        "phone": "+998901234567",
                        "address": "Tashkent, Uzbekistan",
                        "role": "manager",
                        "branch_id": {
                          "_id": "64f1a2b3c4d5e6f789012346",
                          "name": "Main Branch",
                          "address": "Tashkent, Uzbekistan"
                        }
                      }
                    ],
                    "pagination": {
                      "total": 25,
                      "total_pages": 3,
                      "page": 1,
                      "limit": 10,
                      "next_page": true,
                      "prev_page": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/employee/get-one/{id}": {
        "get": {
          "tags": ["Employee"],
          "summary": "Get employee by ID for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the employee to retrieve",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Employee retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": {
                      "_id": "64f1a2b3c4d5e6f789012345",
                      "username": "John Doe",
                      "phone": "+998901234567",
                      "address": "Tashkent, Uzbekistan",
                      "role": "manager",
                      "branch_id": {
                        "_id": "64f1a2b3c4d5e6f789012346",
                        "name": "Main Branch",
                        "address": "Tashkent, Uzbekistan"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Employee not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Employee not found"
                  }
                }
              }
            }
          }
        }
      },
      "/employee/delete/{id}": {
        "delete": {
          "tags": ["Employee"],
          "summary": "Delete an employee by ID for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the employee to delete",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Employee deleted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Employee deleted successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Employee not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Employee not found"
                  }
                }
              }
            }
          }
        }
      },
      "/cashier/add": {
        "post": {
          "tags": ["Cashier"],
          "summary": "Add a new cashier for [Manager]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "password": {
                      "type": "string",
                      "example": "securepassword123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Uzbekistan"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64f1a2b3c4d5e6f789012345"
                    },
                    "role": {
                      "type": "string",
                      "example": "manager"
                    }
                  },
                  "required": [
                    "username",
                    "phone",
                    "password",
                    "address",
                    "branch_id",
                    "role"
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Employee created successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Employee created successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Branch not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Branch not found"
                  }
                }
              }
            },
            "409": {
              "description": "Phone number already exists",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Phone number already exists"
                  }
                }
              }
            }
          }
        }
      },
      "/cashier/update/{id}": {
        "put": {
          "tags": ["Cashier"],
          "summary": "Update an existing cashier for [Manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the employee to update",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "password": {
                      "type": "string",
                      "example": "newpassword123"
                    },
                    "address": {
                      "type": "string",
                      "example": "Tashkent, Uzbekistan"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64f1a2b3c4d5e6f789012346"
                    },
                    "role": {
                      "type": "string",
                      "example": "manager"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Employee updated successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Employee updated successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Employee or branch not found",
              "content": {
                "application/json": {
                  "examples": {
                    "employeeNotFound": {
                      "summary": "Employee not found",
                      "value": {
                        "success": false,
                        "msg": "Employee not found"
                      }
                    },
                    "branchNotFound": {
                      "summary": "Branch not found",
                      "value": {
                        "success": false,
                        "msg": "Branch not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Phone number already exists",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Phone number already exists"
                  }
                }
              }
            }
          }
        }
      },
      "/cashier/get-all": {
        "get": {
          "tags": ["Cashier"],
          "summary": "Get all cashiers with optional search, branch filter, and pagination for [manager]",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "required": false,
              "description": "Search term for username, address, or phone",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "description": "Filter by branch ID",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "description": "Page number for pagination",
              "schema": {
                "type": "integer",
                "example": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "description": "Number of employees per page",
              "schema": {
                "type": "integer",
                "example": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of employees",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": [
                      {
                        "_id": "64f1a2b3c4d5e6f789012345",
                        "username": "John Doe",
                        "phone": "+998901234567",
                        "address": "Tashkent, Uzbekistan",
                        "role": "manager",
                        "branch_id": {
                          "_id": "64f1a2b3c4d5e6f789012346",
                          "name": "Main Branch",
                          "address": "Tashkent, Uzbekistan"
                        }
                      }
                    ],
                    "pagination": {
                      "total": 25,
                      "total_pages": 3,
                      "page": 1,
                      "limit": 10,
                      "next_page": true,
                      "prev_page": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/cashier/get-one/{id}": {
        "get": {
          "tags": ["Cashier"],
          "summary": "Get cashier by ID for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the employee to retrieve",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Employee retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": {
                      "_id": "64f1a2b3c4d5e6f789012345",
                      "username": "John Doe",
                      "phone": "+998901234567",
                      "address": "Tashkent, Uzbekistan",
                      "role": "manager",
                      "branch_id": {
                        "_id": "64f1a2b3c4d5e6f789012346",
                        "name": "Main Branch",
                        "address": "Tashkent, Uzbekistan"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Employee not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Employee not found"
                  }
                }
              }
            }
          }
        }
      },
      "/cashier/delete/{id}": {
        "delete": {
          "tags": ["Cashier"],
          "summary": "Delete a cashier by ID for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the employee to delete",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Employee deleted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Employee deleted successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Employee not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Employee not found"
                  }
                }
              }
            }
          }
        }
      },
      "/category/add": {
        "post": {
          "tags": ["Category"],
          "summary": "Add a new category for [ceo]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Electronics"
                    },
                    "description": {
                      "type": "string",
                      "example": "Category for electronic products"
                    }
                  },
                  "required": ["name", "description"]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Category created successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Category created successfully"
                  }
                }
              }
            },
            "409": {
              "description": "Category name already exists",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Category name already exists"
                  }
                }
              }
            }
          }
        }
      },
      "/category/update/{id}": {
        "put": {
          "tags": ["Category"],
          "summary": "Update an existing category for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the category to update",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Updated Electronics"
                    },
                    "description": {
                      "type": "string",
                      "example": "Updated description for category"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Category updated successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Category updated successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Category not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Category not found"
                  }
                }
              }
            },
            "409": {
              "description": "Category name already exists",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Category name already exists"
                  }
                }
              }
            }
          }
        }
      },
      "/category/get-all": {
        "get": {
          "tags": ["Category"],
          "summary": "Get all categories with optional search and pagination for [ceo,manager,storekeeper,rent_cashier,sale_cashier]",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "required": false,
              "description": "Search term for category name",
              "schema": {
                "type": "string",
                "example": ""
              }
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "description": "Page number for pagination",
              "schema": {
                "type": "integer",
                "example": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "description": "Number of categories per page",
              "schema": {
                "type": "integer",
                "example": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of categories",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": [
                      {
                        "_id": "64f1a2b3c4d5e6f789012345",
                        "name": "Electronics",
                        "description": "Category for electronic products"
                      },
                      {
                        "_id": "64f1a2b3c4d5e6f789012346",
                        "name": "Books",
                        "description": "Category for books"
                      }
                    ],
                    "pagination": {
                      "total": 25,
                      "total_pages": 3,
                      "page": 1,
                      "limit": 10,
                      "next_page": true,
                      "prev_page": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/category/get-one/{id}": {
        "get": {
          "tags": ["Category"],
          "summary": "Get category by ID for [ceo,manager,storekeeper,rent_cashier,sale_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the category to retrieve",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Category retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": {
                      "_id": "64f1a2b3c4d5e6f789012345",
                      "name": "Electronics",
                      "description": "Category for electronic products"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Category not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Category not found"
                  }
                }
              }
            }
          }
        }
      },
      "/category/delete/{id}": {
        "delete": {
          "tags": ["Category"],
          "summary": "Delete a category by ID for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "ID of the category to delete",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f789012345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Category deleted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "msg": "Category deleted successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Category not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "msg": "Category not found"
                  }
                }
              }
            }
          }
        }
      },
      "/product-detail/sale-product/barcode/{barcode}": {
        "get": {
          "tags": ["Product-Barcode"],
          "summary": "Get sale product by barcode for [manager,storekeeper]",
          "parameters": [
            {
              "name": "barcode",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/product-detail/rent-product/barcode/{barcode}": {
        "get": {
          "tags": ["Product-Barcode"],
          "summary": "Get rent product by barcode for [manager,storekeeper]",
          "parameters": [
            {
              "name": "barcode",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/product-detail/sale-product/get-all": {
        "get": {
          "tags": ["Ceo-Product-Details"],
          "summary": "Get all sale product details for [ceo]",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Search by name, barcode or description"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/product-detail/sale-product/get-one/{id}": {
        "get": {
          "tags": ["Ceo-Product-Details"],
          "summary": "Get sale product detail by ID for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "MongoDB ObjectId of the product"
            }
          ],
          "responses": {}
        }
      },
      "/product-detail/sale-product/update-cost-price/{id}": {
        "patch": {
          "tags": ["Ceo-Product-Details"],
          "summary": "Update cost price of sale product by ID for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "MongoDB ObjectId of the product"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product_buying_price": {
                      "type": "number",
                      "example": 12000
                    }
                  },
                  "required": ["product_buying_price"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/product-detail/rent-product/get-all": {
        "get": {
          "tags": ["Ceo-Product-Details"],
          "summary": "Get all rent product details for [ceo]",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Search by name, barcode or description"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/product-detail/rent-product/get-one/{id}": {
        "get": {
          "tags": ["Ceo-Product-Details"],
          "summary": "Get rent product detail by ID for [ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "MongoDB ObjectId of the rent product"
            }
          ],
          "responses": {}
        }
      },
      "/product/sale-product/add": {
        "post": {
          "tags": ["Product"],
          "summary": "Add new sale product for [manager]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "name": {
                      "type": "string",
                      "example": "LG TV 42 inch"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 50
                    },
                    "description": {
                      "type": "string",
                      "example": "Smart TV with 4K resolution"
                    },
                    "category_id": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "price": {
                      "type": "number",
                      "example": 350.5
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["image1.jpg", "image2.jpg"]
                    },
                    "barcode": {
                      "type": "string",
                      "example": "1234567890123"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "Color"
                          },
                          "value": {
                            "type": "string",
                            "example": "Black"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "branch",
                    "name",
                    "product_count",
                    "category_id",
                    "price",
                    "images",
                    "barcode"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/product/rent-product/add": {
        "post": {
          "tags": ["Product"],
          "summary": "Add new rent product for [manager]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "name": {
                      "type": "string",
                      "example": "Excavator"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 10
                    },
                    "product_rent_price": {
                      "type": "number",
                      "example": 500
                    },
                    "description": {
                      "type": "string",
                      "example": "Heavy duty excavator for rent"
                    },
                    "category_id": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["excavator1.png", "excavator2.png"]
                    },
                    "barcode": {
                      "type": "string",
                      "example": "9876543210987"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "Weight"
                          },
                          "value": {
                            "type": "string",
                            "example": "20 Tons"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "branch",
                    "name",
                    "product_count",
                    "product_rent_price",
                    "category_id",
                    "images",
                    "barcode"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/product/sale-product/update/{id}": {
        "put": {
          "tags": ["Product"],
          "summary": "Update sale product for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Updated TV Name"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "price": {
                      "type": "number",
                      "example": 400
                    },
                    "description": {
                      "type": "string",
                      "example": "Updated description"
                    },
                    "category_id": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "barcode": {
                      "type": "string",
                      "example": "111222333444"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/product/rent-product/update/{id}": {
        "put": {
          "tags": ["Product"],
          "summary": "Update rent product for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "product_count": {
                      "type": "integer"
                    },
                    "product_rent_price": {
                      "type": "number"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "string"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "barcode": {
                      "type": "string"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/product/sale-product/get-all": {
        "get": {
          "tags": ["Product"],
          "summary": "Get all sale products for [ceo,manager ,sale_cashier]",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 1
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 10
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "TV"
            }
          ],
          "responses": {}
        }
      },
      "/product/rent-product/get-all": {
        "get": {
          "tags": ["Product"],
          "summary": "Get all rent products for [ceo,manager ,rent_cashier]",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 1
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 10
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "Excavator"
            }
          ],
          "responses": {}
        }
      },
      "/product/sale-product/get/{id}": {
        "get": {
          "tags": ["Product"],
          "summary": "Get sale product by ID for [ceo,manager ,sale_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/product/rent-product/get/{id}": {
        "get": {
          "tags": ["Product"],
          "summary": "Get rent product by ID for [ceo,manager ,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/product/sale-product/delete/{id}": {
        "delete": {
          "tags": ["Product"],
          "summary": "Delete sale product by ID for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        },
        "/product/rent/delete/{id}": {
          "delete": {
            "tags": ["Product"],
            "summary": "Delete rent product by ID",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {}
          }
        }
      },
      "/product/rent-product/delete/{id}": {
        "delete": {
          "tags": ["Product"],
          "summary": "Delete rent product by ID for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/warehouse/sale-product/receive-from-supplier": {
        "post": {
          "tags": ["Warehouse"],
          "summary": "Receive sale products from supplier for [ storekeeper ]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supplier": {
                      "type": "string",
                      "example": "64c8f2f4d5f1a5c1b8d0a123"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "product": {
                            "type": "string",
                            "example": "64c8f2f4d5f1a5c1b8d0a456"
                          },
                          "product_count": {
                            "type": "integer",
                            "example": 10
                          },
                          "supplier_cost_price": {
                            "type": "number",
                            "example": 50000
                          }
                        }
                      }
                    },
                    "total_amount": {
                      "type": "number",
                      "example": 500000
                    },
                    "paid_amount": {
                      "type": "number",
                      "example": 300000
                    },
                    "debt_amount": {
                      "type": "number",
                      "example": 200000
                    },
                    "payments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "example": 300000
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "cash",
                              "plastic",
                              "terminal",
                              "bank",
                              "usd",
                              "eur"
                            ],
                            "example": "cash"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "supplier",
                    "products",
                    "total_amount",
                    "paid_amount",
                    "debt_amount",
                    "payments"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/rent-product/receive-from-supplier": {
        "post": {
          "tags": ["Warehouse"],
          "summary": "Receive sale products from supplier for [ storekeeper ]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supplier": {
                      "type": "string",
                      "example": "64c8f2f4d5f1a5c1b8d0a123"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "product": {
                            "type": "string",
                            "example": "64c8f2f4d5f1a5c1b8d0a456"
                          },
                          "product_count": {
                            "type": "integer",
                            "example": 10
                          },
                          "supplier_cost_price": {
                            "type": "number",
                            "example": 50000
                          }
                        }
                      }
                    },
                    "total_amount": {
                      "type": "number",
                      "example": 500000
                    },
                    "paid_amount": {
                      "type": "number",
                      "example": 300000
                    },
                    "debt_amount": {
                      "type": "number",
                      "example": 200000
                    },
                    "payments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "example": 300000
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "cash",
                              "plastic",
                              "terminal",
                              "bank",
                              "usd",
                              "eur"
                            ],
                            "example": "cash"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "supplier",
                    "products",
                    "total_amount",
                    "paid_amount",
                    "debt_amount",
                    "payments"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/sale-product/issue-to-branch": {
        "post": {
          "tags": ["Warehouse"],
          "summary": "Issue sale products to branch for [ storekeeper ]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64c8f2f4d5f1a5c1b8d0a789"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "product": {
                            "type": "string",
                            "example": "64c8f2f4d5f1a5c1b8d0a456"
                          },
                          "barcode": {
                            "type": "string",
                            "example": "1234567890123"
                          },
                          "product_count": {
                            "type": "integer",
                            "example": 5
                          }
                        }
                      }
                    }
                  },
                  "required": ["branch", "products", "barcode"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/rent-product/issue-to-branch": {
        "post": {
          "tags": ["Warehouse"],
          "summary": "Issue rent products to branch for [ storekeeper ]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64c8f2f4d5f1a5c1b8d0a789"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "product": {
                            "type": "string",
                            "example": "64c8f2f4d5f1a5c1b8d0a456"
                          },
                          "barcode": {
                            "type": "string",
                            "example": "1234567890123"
                          },
                          "product_count": {
                            "type": "integer",
                            "example": 5
                          }
                        }
                      }
                    }
                  },
                  "required": ["branch", "products", "barcode"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/sale-product/add": {
        "post": {
          "tags": ["Warehouse"],
          "summary": "Add new sale warehouse product for [ storekeeper ]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "LG TV 42 inch"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 50
                    },
                    "description": {
                      "type": "string",
                      "example": "Smart TV with 4K resolution"
                    },
                    "category_id": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "price": {
                      "type": "number",
                      "example": 350.5
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["image1.jpg", "image2.jpg"]
                    },
                    "barcode": {
                      "type": "string",
                      "example": "1234567890123"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "Color"
                          },
                          "value": {
                            "type": "string",
                            "example": "Black"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "name",
                    "product_count",
                    "category_id",
                    "price",
                    "images",
                    "barcode"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/rent-product/add": {
        "post": {
          "tags": ["Warehouse"],
          "summary": "Add new rent warehouse product for [ storekeeper ]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Excavator"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 10
                    },
                    "description": {
                      "type": "string",
                      "example": "Heavy duty excavator for rent"
                    },
                    "category_id": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["excavator1.png", "excavator2.png"]
                    },
                    "barcode": {
                      "type": "string",
                      "example": "9876543210987"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "Weight"
                          },
                          "value": {
                            "type": "string",
                            "example": "20 Tons"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "name",
                    "product_count",
                    "category_id",
                    "images",
                    "barcode"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/sale-product/update/{id}": {
        "put": {
          "tags": ["Warehouse"],
          "summary": "Update sale warehouse product for [ storekeeper ]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Updated TV Name"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "price": {
                      "type": "number",
                      "example": 400
                    },
                    "description": {
                      "type": "string",
                      "example": "Updated description"
                    },
                    "category_id": {
                      "type": "string",
                      "example": "64cfa03a6a8f3c1a2b123456"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "barcode": {
                      "type": "string",
                      "example": "111222333444"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/rent-product/update/{id}": {
        "put": {
          "tags": ["Warehouse"],
          "summary": "Update rent warehouse product for [ storekeeper ]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "product_count": {
                      "type": "integer"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "string"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "barcode": {
                      "type": "string"
                    },
                    "attributes": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/warehouse/sale-product/get-all": {
        "get": {
          "tags": ["Warehouse"],
          "summary": "Get all sale warehouse products for [storekeeper,ceo]",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 1
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 10
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "TV"
            }
          ],
          "responses": {}
        }
      },
      "/warehouse/rent-product/get-all": {
        "get": {
          "tags": ["Warehouse"],
          "summary": "Get all rent warehouse products for [storekeeper,ceo]",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 1
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "example": 10
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "Excavator"
            }
          ],
          "responses": {}
        }
      },
      "/warehouse/sale-product/get/{id}": {
        "get": {
          "tags": ["Warehouse"],
          "summary": "Get sale warehouse product by ID for [storekeeper,ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/warehouse/rent-product/get/{id}": {
        "get": {
          "tags": ["Warehouse"],
          "summary": "Get rent warehouse product by ID for [storekeeper,ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/warehouse/sale-product/delete/{id}": {
        "delete": {
          "tags": ["Warehouse"],
          "summary": "Delete sale warehouse product by ID for [storekeeper]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/warehouse/rent-product/delete/{id}": {
        "delete": {
          "tags": ["Warehouse"],
          "summary": "Delete rent warehouse product by ID for [storekeeper]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {}
        }
      },
      "/supplier/add": {
        "post": {
          "summary": "Add new supplier",
          "tags": ["Suppliers"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["full_name", "phone", "type", "supply_category"],
                  "properties": {
                    "full_name": {
                      "type": "string",
                      "example": "Ali Valiyev"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "product_count": {
                      "type": "integer",
                      "example": 100
                    },
                    "total_debt": {
                      "type": "number",
                      "example": 50000
                    },
                    "type": {
                      "type": "string",
                      "example": "wholesale"
                    },
                    "supply_category": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "mongoId"
                      },
                      "example": ["64f8d9f9a2b3c4d5e6f7a8b9"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/supplier/update/{id}": {
        "put": {
          "summary": "Update supplier",
          "tags": ["Suppliers"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "mongoId"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "full_name": {
                      "type": "string",
                      "example": "Ali Valiyev"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "supply_category": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "mongoId"
                      },
                      "example": ["64f8d9f9a2b3c4d5e6f7a8b9"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/supplier/get-all": {
        "get": {
          "summary": "Get all suppliers (with filters & pagination)",
          "tags": ["Suppliers"],
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Search suppliers by name or phone"
            },
            {
              "name": "type",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Supplier type"
            },
            {
              "name": "supply_category",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "mongoId"
                }
              },
              "style": "form",
              "explode": true,
              "description": "Filter by one or more supply category IDs"
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ]
        }
      },
      "/supplier/get/{id}": {
        "get": {
          "tags": ["Suppliers"],
          "summary": "Get supplier details by ID for [storekeeper,ceo]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            }
          ],
          "responses": {}
        }
      },
      "/supplier/delete/{id}": {
        "delete": {
          "tags": ["Suppliers"],
          "summary": "Delete supplier by ID for [storekeeper]",
          "description": "Deletes a supplier by its ID. Returns an error if there are supplierProduct associated.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            }
          ],
          "responses": {}
        }
      },
      "/supplier/{supplierId}/debt-payment": {
        "post": {
          "tags": ["Supplier"],
          "summary": "To pay our debt to the guarantor for [storekeeper]",
          "parameters": [
            {
              "name": "supplierId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "integer",
                      "example": "pay amount"
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/supplier/{supplierId}/debt-payment/update/{paymentId}": {
        "patch": {
          "tags": ["Supplier"],
          "summary": "Update supplier payment details for [storekeeper]",
          "parameters": [
            {
              "name": "supplierId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            },
            {
              "name": "paymentId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Payment ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "integer",
                      "example": "pay amount"
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/supplier/{supplierId}/get-all-debt-payment-log": {
        "get": {
          "tags": ["Supplier"],
          "summary": "History of payments made to the supplier for [storekeeper]",
          "parameters": [
            {
              "name": "supplierId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/supplier/sale-products": {
        "get": {
          "tags": ["Supplier"],
          "summary": "Get all supplier sale products for [CEO, storekeeper]",
          "parameters": [
            {
              "name": "supplier",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/supplier/sale-products/{id}": {
        "get": {
          "tags": ["Supplier"],
          "summary": "Get supplier sale product detail for [CEO, storekeeper]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Sale product ID"
            }
          ],
          "responses": {}
        }
      },
      "/supplier/rent-products": {
        "get": {
          "tags": ["Supplier"],
          "summary": "Get all supplier rent products for [CEO, storekeeper]",
          "parameters": [
            {
              "name": "supplier",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Supplier ID"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/supplier/rent-products/{id}": {
        "get": {
          "tags": ["Supplier"],
          "summary": "Get supplier rent product detail for [CEO, storekeeper]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent product ID"
            }
          ],
          "responses": {}
        }
      },
      "/mechanic/add": {
        "post": {
          "tags": ["Mechanic"],
          "summary": "Add a new mechanic for [manager]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "Javlon Qodirov"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998901112233"
                    },
                    "work_type": {
                      "type": "string",
                      "example": "SERVICE",
                      "enum": ["SERVICE", "FIELD_SERVICE"],
                      "description": "Mechanic work type"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34cd56"
                    }
                  },
                  "required": ["fullName", "phone", "work_type", "branch_id"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/mechanic/update/{id}": {
        "put": {
          "tags": ["Mechanic"],
          "summary": "Update mechanic details for [manager]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Mechanic ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "Updated Mechanic Name"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+998909998877"
                    },
                    "work_type": {
                      "type": "string",
                      "example": "SERVICE",
                      "enum": ["SERVICE", "FIELD_SERVICE"],
                      "description": "Mechanic work type"
                    },
                    "branch_id": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34cd56"
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/mechanic/get-all": {
        "get": {
          "tags": ["Mechanic"],
          "summary": "Retrieve a list of all mechanics for [ceo,manager,rent_cashier]",
          "parameters": [
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Search by fullName or phone"
            },
            {
              "name": "work_type",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["SERVICE", "FIELD_SERVICE"]
              },
              "description": "Filter by work type"
            },
            {
              "name": "branch_id",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Branch ID filter"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/mechanic/get/{id}": {
        "get": {
          "tags": ["Mechanic"],
          "summary": "Get mechanic details by ID for [ceo,manager,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Mechanic ID"
            }
          ],
          "responses": {}
        }
      },
      "/mechanic/delete/{id}": {
        "delete": {
          "tags": ["Mechanic"],
          "summary": "Delete mechanic by ID for [menager]",
          "description": "Deletes a mechanic by its ID. Only mechanics created today can be deleted.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Mechanic ID"
            }
          ],
          "responses": {}
        }
      },
      "/service/add": {
        "post": {
          "tags": ["Service"],
          "summary": "Add a new service for [manager,rent_cashier]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34cd56"
                    },
                    "client_name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "client_phone": {
                      "type": "string",
                      "example": "+998901234567"
                    },
                    "mechanic": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34ab12"
                    },
                    "mechanic_salary": {
                      "type": "number",
                      "example": 500000
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "product": {
                            "type": "string",
                            "example": "64b7f9c2f2d4b0a12a34aa11"
                          },
                          "product_count": {
                            "type": "integer",
                            "example": 5
                          }
                        },
                        "required": ["product", "product_count"]
                      }
                    },
                    "received_date": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-08-26T10:00:00.000Z"
                    },
                    "delivery_date": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-08-28T18:00:00.000Z"
                    }
                  },
                  "required": [
                    "branch",
                    "client_name",
                    "client_phone",
                    "mechanic",
                    "mechanic_salary",
                    "received_date",
                    "delivery_date"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/service/update/{id}": {
        "put": {
          "tags": ["Service"],
          "summary": "Update service details for [manager,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34cd56"
                    },
                    "client_name": {
                      "type": "string",
                      "example": "Jane Doe"
                    },
                    "client_phone": {
                      "type": "string",
                      "example": "+998907654321"
                    },
                    "mechanic": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34ab12"
                    },
                    "mechanic_salary": {
                      "type": "number",
                      "example": 600000
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "product": {
                            "type": "string",
                            "example": "64b7f9c2f2d4b0a12a34aa11"
                          },
                          "product_count": {
                            "type": "integer",
                            "example": 5
                          }
                        },
                        "required": ["product", "product_count"]
                      }
                    },
                    "received_date": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-08-26T10:00:00.000Z"
                    },
                    "delivery_date": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-08-29T18:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/service/get-all": {
        "get": {
          "tags": ["Service"],
          "summary": "Retrieve a list of all services for [ceo,manager,rent_cashier]",
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["IN_PROGRESS", "COMPLETED", "CANCELED"]
              },
              "description": "Filter by service status"
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Search by client_name or client_phone"
            },
            {
              "name": "branch",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Branch ID filter"
            },
            {
              "name": "mechanic",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Mechanic ID filter"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Items per page"
            }
          ],
          "responses": {}
        }
      },
      "/service/get/{id}": {
        "get": {
          "tags": ["Service"],
          "summary": "Get service details by ID for [ceo,manager,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {}
        }
      },
      "/service/delete/{id}": {
        "delete": {
          "tags": ["Service"],
          "summary": "Delete service by ID for [,manager,,rent_cashier,]",
          "description": "Deletes a service by its ID. Only services created today can be deleted.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {}
        }
      },
      "/service/complete/{id}": {
        "put": {
          "tags": ["Service"],
          "summary": "Mark service as completed for [manager,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "example": 200000
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "cash",
                              "plastic",
                              "terminal",
                              "bank",
                              "usd",
                              "eur"
                            ],
                            "example": "cash"
                          }
                        }
                      }
                    }
                  },
                  "required": ["payment", "payment_type"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/service/cancel/{id}": {
        "put": {
          "tags": ["Service"],
          "summary": "Cancel service for [manager,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service ID"
            }
          ],
          "responses": {}
        }
      },
      "/rent/add": {
        "post": {
          "tags": ["Rent"],
          "summary": "Add a new rent for [rent_cashier]",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34cd56"
                    },
                    "client": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34aa99"
                    },
                    "client_name": {
                      "type": "string",
                      "example": "Ali Valiyev"
                    },
                    "rent_products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rent_product": {
                            "type": "string",
                            "example": "64b7f9c2f2d4b0a12a34aa11"
                          },
                          "rent_product_count": {
                            "type": "integer",
                            "example": 5
                          }
                        },
                        "required": ["rent_product", "rent_product_count"]
                      }
                    },
                    "received_date": {
                      "type": "string",
                      "format": "date",
                      "example": "2025-09-10"
                    },
                    "delivery_date": {
                      "type": "string",
                      "format": "date",
                      "example": "2025-09-12"
                    }
                  },
                  "required": [
                    "branch",
                    "client",
                    "client_name",
                    "rent_products",
                    "received_date",
                    "delivery_date"
                  ]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/rent/update/{id}": {
        "patch": {
          "tags": ["Rent"],
          "summary": "Update rent for [rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "branch": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34cd56"
                    },
                    "client": {
                      "type": "string",
                      "example": "64b7f9c2f2d4b0a12a34aa99"
                    },
                    "client_name": {
                      "type": "string",
                      "example": "Vali Karimov"
                    },
                    "rent_products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rent_product": {
                            "type": "string",
                            "example": "64b7f9c2f2d4b0a12a34aa11"
                          },
                          "rent_product_count": {
                            "type": "integer",
                            "example": 10
                          }
                        }
                      }
                    },
                    "received_date": {
                      "type": "string",
                      "format": "date",
                      "example": "2025-09-11"
                    },
                    "delivery_date": {
                      "type": "string",
                      "format": "date",
                      "example": "2025-09-13"
                    }
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/rent/update-delivery-date/{id}": {
        "patch": {
          "tags": ["Rent"],
          "summary": "Update delivery date for [rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delivery_date": {
                      "type": "string",
                      "format": "date",
                      "example": "2025-09-15"
                    }
                  },
                  "required": ["delivery_date"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/rent/complete/{id}": {
        "patch": {
          "tags": ["Rent"],
          "summary": "Complete rent (mark as returned with payments) for [rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "example": 100000
                          },
                          "type": {
                            "type": "string",
                            "example": "cash"
                          }
                        },
                        "required": ["amount", "type"]
                      }
                    }
                  },
                  "required": ["payments"]
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/rent/cancel/{id}": {
        "patch": {
          "tags": ["Rent"],
          "summary": "Cancel rent for [rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent ID"
            }
          ],
          "responses": {}
        }
      },
      "/rent/get-all": {
        "get": {
          "tags": ["Rent"],
          "summary": "Get all rents for [ceo,manager,rent_cashier]",
          "parameters": [
            {
              "name": "branch",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Branch ID"
            },
            {
              "name": "client",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Client ID"
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["PAID", "PARTIAL", "DEBT"]
              },
              "description": "Payment status"
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "description": "Search by client name"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page number"
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer"
              },
              "description": "Page size"
            }
          ],
          "responses": {}
        }
      },
      "/rent/get-one/{id}": {
        "get": {
          "tags": ["Rent"],
          "summary": "Get one rent by ID [ceo,manager,rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent ID"
            }
          ],
          "responses": {}
        }
      },
      "/rent/delete/{id}": {
        "delete": {
          "tags": ["Rent"],
          "summary": "Delete rent for [rent_cashier]",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Rent ID"
            }
          ],
          "responses": {}
        }
      }
    }
  },
  "customOptions": {},
  "swaggerUrl": {}
}
